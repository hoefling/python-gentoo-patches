From f2da7574359df648c6ab87aa9a4db566503b0005 Mon Sep 17 00:00:00 2001
From: Mike Gilbert <floppym@gentoo.org>
Date: Fri, 5 Jan 2018 13:30:32 -0500
Subject: [PATCH 2/9] Disable modules and SSL

---
 setup.py | 17 ++++++++++++++---
 1 file changed, 14 insertions(+), 3 deletions(-)

diff --git a/setup.py b/setup.py
index 88cff6164d..6d45ccd3ee 100644
--- a/setup.py
+++ b/setup.py
@@ -24,7 +24,17 @@ from distutils.spawn import find_executable
 TEST_EXTENSIONS = True
 
 # This global variable is used to hold the list of modules to be disabled.
-DISABLED_MODULE_LIST = []
+PDM_ENV = "PYTHON_DISABLE_MODULES"
+if PDM_ENV in os.environ:
+    DISABLED_MODULE_LIST = os.environ[PDM_ENV].split()
+else:
+    DISABLED_MODULE_LIST = []
+
+PDS_ENV = "PYTHON_DISABLE_SSL"
+if PDS_ENV in os.environ:
+    DISABLE_SSL = os.environ[PDS_ENV]
+else:
+    DISABLE_SSL = 0
 
 
 def get_platform():
@@ -2177,6 +2187,7 @@ class PyBuildExt(build_ext):
                            depends=depends))
 
     def detect_openssl_hashlib(self):
+        global DISABLE_SSL
         # Detect SSL support for the socket module (via _ssl)
         config_vars = sysconfig.get_config_vars()
 
@@ -2215,7 +2226,7 @@ class PyBuildExt(build_ext):
         if krb5_h:
             ssl_incs.extend(krb5_h)
 
-        if config_vars.get("HAVE_X509_VERIFY_PARAM_SET1_HOST"):
+        if config_vars.get("HAVE_X509_VERIFY_PARAM_SET1_HOST") and not DISABLE_SSL:
             self.add(Extension(
                 '_ssl', ['_ssl.c'],
                 include_dirs=openssl_includes,
@@ -2226,11 +2237,14 @@ class PyBuildExt(build_ext):
         else:
             self.missing.append('_ssl')
 
-        self.add(Extension('_hashlib', ['_hashopenssl.c'],
-                           depends=['hashlib.h'],
-                           include_dirs=openssl_includes,
-                           library_dirs=openssl_libdirs,
-                           libraries=openssl_libs))
+        if not DISABLE_SSL:
+            self.add(Extension('_hashlib', ['_hashopenssl.c'],
+                               depends=['hashlib.h'],
+                               include_dirs=openssl_includes,
+                               library_dirs=openssl_libdirs,
+                               libraries=openssl_libs))
+        else:
+            self.missing.append('_hashlib')
 
     def detect_hash_builtins(self):
         # We always compile these even when OpenSSL is available (issue #14693).
-- 
2.22.0

